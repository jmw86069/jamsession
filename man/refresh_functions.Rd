% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamsession_functions.R
\name{refresh_functions}
\alias{refresh_functions}
\title{Load or refresh R file functions as a temporary package}
\usage{
refresh_functions(
  session,
  pkg_name = NULL,
  functions_path = jamsession_paths()$functions,
  fn_pattern = "_functions.R$",
  define_defaults = FALSE,
  pkg_suffix = "",
  use_tempdir = base::tempdir(),
  verbose = TRUE,
  ...
)
}
\arguments{
\item{session}{\code{character} vector of one or more function files
to load. Note than when multiple functions are loaded, they
are combined into the same temporary package.}

\item{pkg_name}{\code{NULL} or \code{character} string indicating the name
to use for the temporary package. By default it uses the first
\code{session}, and if there are multiple \code{session} files then
it appends the number of files as a suffix.}

\item{functions_path}{character vector of one or more file paths to search
for saved R functions. When \code{NULL}, it uses the output from
\code{jamsession_paths()$functions}. When \code{session} matches multiple
files, then the most recently modified file is used, as defined
by \code{jamba::newestFile()}.}

\item{fn_pattern}{\code{character} pattern appended to \code{session} to
match compatible R files. The default format is \code{"session_functions.R"}
and so default \code{fn_pattern="_functions.R"}.}

\item{define_defaults}{\code{logical} indicating whether to define
\code{options("usethis.description")} using jamsession default values.
If \code{getOption("usethis.description")} is not defined, then
default values are used regardless. Otherwise, the
values from \code{getOption("usethis.description")} are only modified
when \code{default_defaults=TRUE}.
As the R package is only temporary, these defaults have little
actual impact. Just be sure to edit the DESCRIPTION file if
you intend to use the R package long term.}

\item{pkg_suffix}{\code{NULL} or \code{character} string used as a suffix,
appended to the end of the temporary package name. The \code{pkg_suffix}
or \code{pkg_name} are useful to avoid name conflicts with proper R
packages. For example \code{"igraph_functions.R"} should be not
be loaded as \code{"igraph"} or else it will conflict with the actual
\code{"igraph"} R package.}

\item{use_tempdir}{\code{character} path, or function which returns a valid
file path suitable to create a subdirectory for this temporary
R package. By default \code{base::tempdir()} returns a single temporary
directory for each R session, note that this directory may be deleted
when the R session is ended.}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}
}
\description{
Load or refresh R file functions as a temporary package
}
\details{
This function loads an R file that contains custom R functions,
as if that R file were part of a temporary R package.

It assumes the R file or files contain only valid R functions,
which are optionally documented using the \code{roxygen2} style
described in the \code{roxygen2} package.

This mechanism of loading R functions is an improvement over
using \code{base::source()} or \code{base::sys.source()} in these ways:
\enumerate{
\item Help documents for each function will be prepared, if
they were defined using \code{roxygen2} format for each function.
\item R functions are loaded into a namespace, separate from the
\code{.GlobalEnv} workspace. When saving
the R session itself, the custom functions will not be
included, because they are not part of the workspace.
\item When the custom R functions are updated, repeat the
call to this function and it will replace the namespace
with the newer namespace.
\item The package is included in \code{sessionInfo()} which helps
indicate that custom functions were also included.
}

Aside: It really is fast and easy to create a new R package,
however it makes sense that small one-off projects do not
justify creating a whole new R package for only one or
two custom R functions. However, the temporary R package
created by this function can be used to create an actual
R package, by copying the temporary folder, or by supplying
a specific folder with the argument \code{use_tempdir}.

To find the temporary R package folder:

\code{system.file(package=pkg_name)}

Ideally you should also use version control like Git, subversion,
CVS, or a similar system. But for one-off projects, this mechanism
is a good start -- and we think it will become a gateway to
creating proper R packages as needed.

Note that this function \code{refresh_functions()} does not validate
the \code{.R} file, nor does it check whether the R file is
valid to be part of an R package. However, because \code{refresh_functions()}
also calls \code{roxygen2::roxygenize()}, it inherits a lot of
validation from that process and will display error messages
as relevant. At this point, those error messages are intended
to be a \emph{good thing} because they make syntax errors visible.

Note that this function does not itself remove the temporary R package
directory, it assumes that when \code{use_tempdir} is defined by
\code{base::tempdir()}, see that function help for more information.
Note that on some linux systems, temporary files not accessed for
more than 7 days may be deleted automatically.
}
\examples{
# create two temporary functions
tempfn <- function(x){x}
another_tempfn <- function(x){length(x)}

# save these functions to a temporary file
# tempfns_functions.R
tempfn_file <- file.path(tempdir(), "tempfns_functions.R");
dump(c("tempfn", "another_tempfn"), file=tempfn_file);

# remove the functions from the environment
rm(tempfn);
rm(another_tempfn);

# load the functions
refresh_functions("tempfns", functions_path=tempdir())

# the tempfn() function is now inside a package
find("tempfn")
#> package:tempfns

# the function can be called
tempfn(c("one", "two"))
#> [1] "one" "two"

}
\concept{jamsession functions}
